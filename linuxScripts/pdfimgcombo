#!/bin/sh
# This script will receive a set of pdf or png images,
# combine them into one page,
# and add a title on the lefthand side.

findName () {
	# sometimes pdfjam makes pdfs that are useless - get rid of those first
	rm -f *pdfjam* &&
	# make file with all filenames
	ls $MYPWD > prefix1.txt &&
	# replace titles with more readable version
	# the underscore allows selection later
	sed -i 's/readmitted30d/30-day Readmission_/g' prefix1.txt &&
	sed -i 's/readmitted3d/3-day Readmission_/g' prefix1.txt &&
	sed -i 's/readmitted5d/5-day Readmission_/g' prefix1.txt &&
	sed -i 's/readmitted7d/7-day Readmission_/g' prefix1.txt &&
	sed -i 's/discharged_in_past_30d/Discharged in Past 30 Days_/g' prefix1.txt &&
	sed -i 's/length_of_stay_over_3_days/Length of Stay Over 3 Days_/g' prefix1.txt &&
	sed -i 's/length_of_stay_over_5_days/Length of Stay Over 5 Days_/g' prefix1.txt &&
	sed -i 's/length_of_stay_over_7_days/Length of Stay Over 7 Days_/g' prefix1.txt &&
	sed -i 's/age_gt_10_y/Age Greater than 10 Years_/g' prefix1.txt &&
	sed -i 's/age_gt_30_y/Age Greater than 30 Years_/g' prefix1.txt &&
	sed -i 's/age_gt_65_y/Age Greater than 65 Years_/g' prefix1.txt &&
	sed -i 's/died_within_48_72h_of_admission_combined/Died within 48-72 hours_/g' prefix1.txt &&
	sed -i 's/financialclass_binary/Financial Class_/g' prefix1.txt &&
	sed -i 's/gender_binary/Gender_/g' prefix1.txt &&
	sed -i 's/race_binary/Race_/g' prefix1.txt &&
	# select name up to underscore --- -F is "field separator"
	# so-F_ means "split on the separator _"
	awk -F_ '{print $1}' < prefix1.txt > prefix2.txt &&
	# then trim from the underscore to the end
	sed -i 's/_.*//g' prefix2.txt &&
	# select the most common line - this is the title we want
	# from stackoverflow.com/questions/29321037
	prefix=$(awk 'max < ++c[$0] {max = c[$0]; line = $0} END {print line}' prefix2.txt) &&
	prefixA="${prefix} A" &&
	prefixB="${prefix} B" &&
	prefixC="${prefix} C" &&
	rm -f prefix1.txt &&
	rm -f prefix2.txt &&
	rm -f prefix3.txt
	}

findFilesA () {
	ls $MYPWD | echo *SHAP_dependence_[0-9]*.pdf > a.txt
	filelistA=$(cat a.txt)
	rm -f a.txt
	}

findFilesB () {
	ls $MYPWD | echo *SHAP_dependence_self_[0-9]*.pdf > b.txt
	filelistB=$(cat b.txt)
	rm -f b.txt
	}

findFilesC () {
	cd force_plots &&
	ls | echo *_SHAP_[0-9][0-9]*.png > c.txt &&
	filelistC=$(cat c.txt) &&
	rm -f c.txt &&
	cd  ..
	}

makePDFsA () {
	rm -f "$prefix A".pdf && \
	pdfjam $filelistA --nup 3x3 \
	--landscape --frame false \
	--templatesize {3in}{2.76in} \
	--outfile a.pdf && \
	#turn the pdf upright to add the title
	#requires an "upright" command
	#otherwise only the "view" of the pdf is changed,
	#and any operations will be done on the "original"
	cpdf -upright -rotateby 90 a.pdf -o a.pdf && \
	cpdf -upright a.pdf -o a.pdf && \
	# set metadata
	cpdf -set-title "$prefix" a.pdf -o a.pdf && \
	cpdf -set-author "C. Beau Hilton" a.pdf -o a.pdf && \
	cpdf -set-create "now" a.pdf -o a.pdf && \
	# the "templatesize" command to pdfjam
	# removed the need for scaling
	# but here's how to do it if needed:
	# cpdf -scale-contents 0.95 a.pdf -o a.pdf && \
	# add the title to pdf
	cpdf -add-text "$prefix" \
	-top 30 -font Helvetica \
	-font-size 30 \
	a.pdf -o a.pdf &&
	cpdf -upright -rotateby 90 a.pdf -o a.pdf &&
	cpdf -upright a.pdf -o a.pdf &&
	cpdf -hflip a.pdf -o a.pdf &&
	cpdf -vflip a.pdf -o a.pdf &&
	# one last upright command for good measure
	cpdf -upright a.pdf -o "$prefixA".pdf
	}

makePDFsB () {
	rm -f "$prefixB".pdf && \
	pdfjam $filelistB --nup 3x3 \
	--quiet --landscape --frame false \
	--templatesize {3in}{2.76in} \
	--outfile a.pdf && \
	#turn the pdf upright to add the title
	#requires an "upright" command
	#otherwise only the "view" of the pdf is changed,
	#and any operations will be done on the "original"
	cpdf -upright -rotateby 90 a.pdf -o a.pdf && \
	cpdf -upright a.pdf -o a.pdf && \
	# set metadata
	cpdf -set-title "$prefix" a.pdf -o a.pdf && \
	cpdf -set-author "C. Beau Hilton" a.pdf -o a.pdf && \
	cpdf -set-create "now" a.pdf -o a.pdf && \
	# the "templatesize" command to pdfjam
	# removed the need for scaling
	# but here's how to do it if needed:
	# cpdf -scale-contents 0.95 a.pdf -o a.pdf && \
	# add the title to pdf
	cpdf -add-text "$prefix" \
	-top 30 -font Helvetica \
	-font-size 30 \
	a.pdf -o a.pdf &&
	cpdf -upright -rotateby 90 a.pdf -o a.pdf &&
	cpdf -upright a.pdf -o a.pdf &&
	cpdf -hflip a.pdf -o a.pdf &&
	cpdf -vflip a.pdf -o a.pdf &&
	# one last upright command for good measure
	cpdf -upright a.pdf -o "$prefixB".pdf
	}

makePDFsC () {
	cd force_plots
	rm -f "$prefixC".pdf && \
	pdfjam $filelistC --nup 1x3 \
	--quiet --landscape --frame false \
	--outfile a.pdf && \
	#turn the pdf upright to add the title
	#requires an "upright" command
	#otherwise only the "view" of the pdf is changed,
	#and any operations will be done on the "original"
	cpdf -upright -rotateby 90 a.pdf -o a.pdf && \
	cpdf -upright a.pdf -o a.pdf && \
	# set metadata
	cpdf -set-title "$prefix" a.pdf -o a.pdf && \
	cpdf -set-author "C. Beau Hilton" a.pdf -o a.pdf && \
	cpdf -set-create "now" a.pdf -o a.pdf && \
	cpdf -scale-contents 0.95 a.pdf -o a.pdf && \
	cpdf -shift "0 -15" a.pdf -o a.pdf && \
	# add the title to pdf
	cpdf -add-text "$prefix" \
	-top 30 -font Helvetica \
	-font-size 30 \
	a.pdf -o a.pdf &&
	cpdf -upright -rotateby 90 a.pdf -o a.pdf &&
	cpdf -upright a.pdf -o a.pdf &&
	cpdf -hflip a.pdf -o a.pdf &&
	cpdf -vflip a.pdf -o a.pdf &&
	# one last upright command for good measure
	cpdf -upright a.pdf -o "$prefixC".pdf &&
	rm a.pdf &&
	cd ..
	}

copyToDirA () {
	# make single directory for easy review, remove old pdfs if exist, and copy new ones to that dir
	mkdir -p /mnt/reports/figures/summary_pdfs &&
	rm -f /mnt/reports/figures/summary_pdfs/"$prefixA".pdf &&
	cp "$prefixA".pdf /mnt/reports/figures/summary_pdfs
	}

copyToDirB () {
	# make single directory for easy review, remove old pdfs if exist, and copy new ones to that dir
	mkdir -p /mnt/reports/figures/summary_pdfs &&
	rm -f /mnt/reports/figures/summary_pdfs/"$prefixB".pdf &&
	cp "$prefixB".pdf /mnt/reports/figures/summary_pdfs
	}

copyToDirC () {
	# make single directory for easy review, remove old pdfs if exist, and copy new ones to that dir
	mkdir -p /mnt/reports/figures/summary_pdfs &&
	rm -f /mnt/reports/figures/summary_pdfs/"$prefixC".pdf &&
	cp "$MYPWD"/force_plots/"$prefixC".pdf /mnt/reports/figures/summary_pdfs
	}

cleanUp () {
	# clean up temp files
	# the "-f" will not throw an error if the file does not exist,
	# e.g. if the directory was empty and no pdf was made
	rm -f prefix1.txt &&
	rm -f prefix2.txt &&
	rm -f a.pdf &&
	rm -f a.txt
	}

MYPWD=${PWD}
cd $MYPWD &&

findName
findFilesA
makePDFsA
copyToDirA
cleanUp

findName
findFilesB
makePDFsB
copyToDirB
cleanUp

findName
findFilesC
makePDFsC
copyToDirC
cleanUp

# This command is an example of usage.
# It will find all directories down one level from the current (current is "1")
# then execute the commands in each directory in turn.
# find ${PWD} -maxdepth 2 -mindepth 2 -type d -execdir ~/.scripts/tools/pdfimgcombo \;
