from tableone import TableOne
from pandas import HDFStore
from plotly.offline import iplot
import pandas as pd
import plotly.plotly as py
import cufflinks
import matplotlib
import matplotlib.pylab as pl
import matplotlib.pyplot as plt
from IPython.core.display import HTML, display
from IPython.core.pylabtools import figsize
import os

# Select offline option and set the global theme for cufflinks
cufflinks.go_offline()
cufflinks.set_config_file(world_readable=True, theme="pearl", offline=True)

# display all columns when viewing dataframes: make the number 
# anything bigger than your number of columns
pd.options.display.max_columns = 2000


# I make a config.py file in the same directory as the notebook, 
# and put in the locations of important files and directories there, and import them as below.
# Then for other projects I can reuse this code more easily

import config
figures_path = config.FIGURES_DIR
tables_path = config.TABLES_DIR
filename = config.CLEAN_RAW_FILE
data = pd.read_hdf(filename, key="rawdata")


# pick the columns to be summarized in Table One
columns = [
    "ageexactyrs",
    "ed_admission",
    "hemoglobin_discharge",
    "sodium_discharge",
    "admitsource",
    "gender",
    "insurance2",
    "length_of_stay",
    "dischargedisposition2",
    "patientclassdescription",
    "marital_status",
    "race",
    "isdeceased",
    "activetreatment",
    "admit_year",
    "num_past_all_admit",
    "hosp_procedure",
    'countlda',
    'ed_6month_total',
    'haslda_pod'
]

# columns containing categorical variables
categorical = [
    "gender",
    "insurance2",
    "admitsource",
    "dischargedisposition2",
    "patientclassdescription",
    "marital_status",
    "race",
    "isdeceased",
    "ed_admission",
    "activetreatment",
    "admit_year",
    "hosp_procedure",
    'haslda_pod'
]

# non-normal variables (when you generate the TableOne it will tell you
# at the bottom which variables it thinks are non-normal)

nonnormal = [
    #"ageexactyrs",
    "length_of_stay",
    "hemoglobin_discharge",
    "sodium_discharge",
    "num_past_all_admit",
    'countlda'
]

# set decimal places
decimals = {"ageexactyrs": 0, 'hemoglobin_discharge': 0, 'sodium_discharge': 0}

# prettify labels
labels = {
    "ageexactyrs": "Age",
    "ed_admission": "Urgent or Emergent Admission",
    "isreadmittedasunplanned": "Admission is an Unplanned Readmission",
}

# categorical variable for stratification
groupby = ["isreadmittedasunplanned"]

# create tableone with the input arguments
mytable = TableOne(
    data,
    groupby=groupby,
    columns=columns,
    categorical=categorical,
    nonnormal=nonnormal,
    labels=labels,
    label_suffix=True,
    decimals=decimals,
    isnull=False,
    pval=True
)

# Save table to LaTeX
fn = os.path.join(tables_path, 'tableone')
mytable.to_latex(fn+'.tex')
# Save table to HTML
fn2 = 'tableone.html'
mytable.to_html(fn+'.html')

# Display
mytable


# The to_latex command is not quite plug-and-play.

# Using Tex Live via Atom/VSCode (whatever) Latex package, make sure you have the following to get a usable PDF:

# `\documentclass{article}
# \usepackage{booktabs, adjustbox}
# \usepackage[T1]{fontenc}
# \usepackage{lmodern}
# \begin{document}
# \begin{adjustbox}{width={\textwidth},totalheight={\textheight},keepaspectratio}%
# \begin{tabular}{llllll}` # the number of "l"s is autogenerated. It's the number of left-justified columns.

# and at the bottom:

# `\bottomrule
# \end{tabular}
# \end{adjustbox}
# \end{document}`


# Save descriptive stats to csv file
descript = os.path.join(tables_path, 'descriptivestats')
df4 = data.describe()
df4.to_csv(descript+'.csv')


# Generate interactive plots
data['ageexactyrs'].iplot(kind='hist', xTitle='Age',
                  yTitle='count', title='Age Distribution',
                  filename=os.path.join(figures_path, "age"),
                  asPlot=True
                          )

data['dischargeyear'].iplot(kind='hist', xTitle='Discharge Year',
                  yTitle='count', title='Discharge Year Distribution',
                  filename=os.path.join(figures_path, "discharge_year"),
                  asPlot=True
                          )

data['insurance2'].iplot(kind='hist', xTitle='Insurance',
                  yTitle='CategoricalEncoderount', title='Insurance Distribution',
                  filename=os.path.join(figures_path, "insurance"),
                  asPlot=True
                          )

df2 = data["insurance2"].astype(str).value_counts()[:] #plotly and cufflinks don't like the "category" dtype,
# so if you're using that dtype this will convert it to the proper "object" dtype

df2.iplot(kind='bar', yTitle='Number of Patients', title='Insurance',
                 filename=os.path.join(figures_path, "insurance2"),
    asPlot=True   )

# This makes a graph of the mean LoS
 df2 = data[['length_of_stay', 'admit_date']].\
         set_index('admit_date').\
         resample('M').mean()
df2 = df2["2015-01-01" : '2019-12-31']

df2.iplot(kind='bar', xTitle='Date', yTitle='Count',
    title='Length of Stay',
    filename=os.path.join(figures_path, "LoS"),
    asPlot=True)

# This makes overlapping histograms showing Hgb at admit and discharge
data[['hemoglobin_admit', 'hemoglobin_discharge']].iplot(
kind='hist',
#histnorm='percent',
barmode='overlay',
#xTitle='Calcium at Admit and Discharge',
#yTitle='(%) of Articles',
title='hemoglobin',
filename=os.path.join(figures_path, "hgb"),
asPlot=True)


